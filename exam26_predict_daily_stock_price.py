# -*- coding: utf-8 -*-
"""exam26_predict_daily_stock_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CfgzcjmJbJEKRpUYScfDgCG2LXvv9Yh2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import *
from tensorflow.keras.optimizers import Adam

raw_data = pd.read_csv('./datasets/samsung.csv')
print(raw_data.head())

print(raw_data.tail())

print(raw_data.info())

print(raw_data.isnull().sum())

df = raw_data.isnull()
df_null = df[df['Open']==True]['Date']
print(df_null)

raw_data.iloc[4513]

raw_data.dropna(inplace=True)
raw_data.reset_index(drop=True, inplace=True)
print(raw_data.info())

raw_data.isnull().sum()

data_close = raw_data[['Close']]
print(data_close.head())

data_close = data_close.sort_values('Close')
print(data_close.head())
print(data_close.tail())

raw_data['Date'] = pd.to_datetime(raw_data['Date'])
raw_data.set_index('Date', inplace=True)
print(raw_data.head())

raw_data['Close'].plot()
plt.show()

data = raw_data[:'2021-10-09'][['Close']]
print(data.head())
print(data.tail())
print(data.info())

data.plot()

from sklearn.preprocessing import MinMaxScaler
minmaxscaler = MinMaxScaler()
scaled_data = minmaxscaler.fit_transform(data)
print(scaled_data[:5])
print(scaled_data.shape)

sequence_X = []
sequence_Y = []
for i in range(len(scaled_data)-30):
    x = scaled_data[i:i+30]
    y = scaled_data[i+30]
    sequence_X.append(x)
    sequence_Y.append(y)
    if i is 0:
        print(x, '->', y)

sequence_X = np.array(sequence_X)
sequence_Y = np.array(sequence_Y)
print(sequence_X[0])
print(sequence_Y[0])
print(sequence_X.shape)
print(sequence_Y.shape)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(
    sequence_X, sequence_Y, test_size=0.2)
print(X_train.shape, Y_train.shape)
print(X_test.shape, Y_test.shape)

model = Sequential()
model.add(LSTM(50, input_shape=(30, 1),
               activation='tanh'))
model.add(Flatten())
model.add(Dense(1))
model.compile(loss='mse', optimizer='adam')
model.summary()

fit_hist = model.fit(X_train, Y_train, epochs=100,
    validation_data=(X_test, Y_test), shuffle=False)

plt.plot(fit_hist.history['loss'], label='loss')
plt.plot(fit_hist.history['val_loss'],
         label='val_loss')
plt.legend()
plt.show()

model.save('./stock_close_predict.h5')

model = load_model('./models/stock_close_predict.h5')

predict = model.predict(X_test)

plt.plot(Y_test[100:150], label='actual')
plt.plot(predict[100:150], label='predict')
plt.legend()
plt.show()

last_data = raw_data['2021-10-09':][['Close']]
print(last_data.head())
print(last_data.tail())
print(last_data.info())

last_30 = data.iloc[-30:]
print(last_30.head())
print(last_30.tail())
print(last_30.info())

last_test_data = pd.concat([last_30, last_data])
print(last_test_data.head())
print(last_test_data.tail())
print(last_test_data.info())

scaled_last_test_data = minmaxscaler.transform(last_test_data)
print(scaled_last_test_data.shape)

sequence_test_X = []
sequence_test_Y = []
for i in range(len(scaled_last_test_data)-30):
    x = scaled_last_test_data[i:i+30]
    y = scaled_last_test_data[i+30]
    sequence_test_X.append(x)
    sequence_test_Y.append(y)
    if i == 0:
        print(x, '->', y)

sequence_test_X = np.array(sequence_test_X)
sequence_test_Y = np.array(sequence_test_Y)

predict_last = model.predict(sequence_test_X)

plt.plot(sequence_test_Y, label='actual')
plt.plot(predict_last, label='predict')
plt.legend()
plt.show()

tomorrow_predict = model.predict(
    scaled_last_test_data[-30:].reshape(1, 30, 1))
print(tomorrow_predict)

tomorrow_predicted_value = minmaxscaler.inverse_transform(tomorrow_predict)
print('%d 원'%tomorrow_predicted_value[0][0])

np.append(scaled_last_test_data, tomorrow_predict)

dat_predict = model.predict(
    scaled_last_test_data[-30:].reshape(1, 30, 1))
print(dat_predict)

dat_predicted_value = minmaxscaler.inverse_transform(dat_predict)
print('%d 원'%dat_predicted_value[0][0])